{
  "files": [
    "certora/harness/ATokenHarness.sol",
    "certora/harness/PoolHarness.sol",
    "certora/harness/StableDebtTokenHarness.sol",
    "certora/harness/SimpleERC20.sol",
    "src/core/instances/VariableDebtTokenInstance.sol",
    "src/core/contracts/misc/AaveProtocolDataProvider.sol",
    "src/core/contracts/protocol/pool/DefaultReserveInterestRateStrategyV2.sol",
    "src/core/contracts/protocol/libraries/types/DataTypes.sol",
    "src/core/contracts/protocol/configuration/PoolAddressesProvider.sol",
  ],
  "link": [
    "ATokenHarness:POOL=PoolHarness",
    "ATokenHarness:_underlyingAsset=SimpleERC20",
    "PoolHarness:ADDRESSES_PROVIDER=PoolAddressesProvider",
  ],
  "struct_link": [
    "PoolHarness:aTokenAddress=ATokenHarness",
    "PoolHarness:stableDebtTokenAddress=StableDebtTokenHarness",
    "PoolHarness:variableDebtTokenAddress=VariableDebtTokenInstance",
    "PoolHarness:interestRateStrategyAddress=DefaultReserveInterestRateStrategyV2",
  ],
  "rule_sanity": "basic", // from time to time, use advanced instead of basic, it gives more insight on requires, vacuity rules etc.
  "optimistic_loop": true,
  "process": "emv",
  "prover_args": ["-depth 12"], // If reachability passes and the time is ok, this number is ok, dont touch it.
  "solc": "solc8.19",
  "verify": "PoolHarness:certora/specs/NEW-pool-simple-properties.spec",
  "rule": [
    "cannotDepositInInactiveReserve",
    "cannotDepositInFrozenReserve",
    "cannotDepositZeroAmount",
    "cannotWithdrawZeroAmount",
    "cannotWithdrawFromInactiveReserve",
    "cannotBorrowZeroAmount",
    "cannotBorrowOnInactiveReserve",
    "cannotBorrowOnReserveDisabledForBorrowing",
    "cannotBorrowOnFrozenReserve"
  ],
  "parametric_contracts": ["PoolHarness"],
  "msg": "pool-simple-properties::ALL",
}
